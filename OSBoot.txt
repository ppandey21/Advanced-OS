Computer Architecture and the Boot Process

-When we reboot our computer, it must start up again, initially without any notion of
an operating system.

-The pre-OS environment of your computer offers little in the way of rich services: at this stage even a simple file system would be a luxury (e.g.
read and write logical files to a disk), but we have none of that. Luckily, what we do have is the Basic Input/Output Software (BIOS), a collection of software routines that are initially loaded from a chip into memory and initialised when the computer is switched on. BIOS provides auto-detection and basic control of your computer’s essential devices, such as the screen, keyboard, and hard disks.
(BIOS is firmware used to perform hardware initialization during the booting process (power-on startup), and to provide runtime services for operating systems and programs. The BIOS firmware comes pre-installed on a personal computer's system board, and it is the first software to run when powered  on.)

-Since BIOS has no notion of File-System in itself, we cannot load an operating system directly. Thus we go to the "boot sector" of the physical memory disk(i.e. Cylinder 0, Head 0, Sector 0) which is basically the easiest place to go to as no FS is available.

-Since some of our disks may
not contain an operating systems (they may simply be connected for additional storage),
then it is important that BIOS can determine whether the boot sector of a particular
disk is boot code that is intended for execution or simply data.

-Again, an unsophisticated means is adopted here by BIOS, whereby the last two
bytes of an intended boot sector must be set to the magic number 0xaa55. So, BIOS
loops through each storage device (e.g. floppy drive, hard disk, CD drive, etc.), reads
the boot sector into memory, and instructs the CPU to begin executing the first boot
sector it finds that ends with the magic number.

BIOS, Boot Blocks, and the Magic Number
-If we use a binary editor, such as TextPad [?] or GHex [?], that will let us write raw byte
values to a file, then we can craft ourselves a simple yet valid boot sector.

e9 fd ff 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
*
00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 aa

A machine code boot sector, with each byte displayed in hexadecimal.

• The initial three bytes, in hexadecimal as 0xe9, 0xfd and 0xff, are actually
machine code instructions, as defined by the CPU manufacturer, to perform an
endless jump.
• The last two bytes, 0x55 and 0xaa, make up the magic number, which tells BIOS
that this is indeed a boot block and not just data that happens to be on a drive’s
boot sector.
• The file is padded with zeros (’*’ indicates zeros omitted for brevity), basically to
position the magic BIOS number at the end of the 512 byte disk sector.


Note- the x86 architecture handles multi-byte values in little-endian format, whereby less significant bytes proceed
more significant bytes, which is contrary to our familiar numbering system. Thus we see magic BIOS
number was earlier described as the 16-bit value 0xaa55 but in our boot sector was
written as the consecutive bytes 0x55 and 0xaa.

-This is possibly the smallest program your computer could run, but it is a valid
program nonetheless, and we can test this in two ways, the second of which is much safer
and better suited to our kind of experiments:
• Using whatever means your current operating system will allow, write this boot
block to the first sector of a non-essential storage device (e.g. floppy disk or flash
drive), then reboot the computer.
• Use virtual machine software, such as VMWare or VirtualBox, and set the boot
block code as a disk image of a virtual machine, then start-up the virtual machine.

-You can be sure this code has been loaded and executed if your computer simply
hangs after booting, without a message such as “No operating system found”.

Note - Without the infinite loop in beginning of the machine code, CPU
would tear off, executing every subsequent instruction in memory, most of which will
be random, uninitialised bytes.

CPU EMULATORS:
Bochs: A x86 CPU Emulator
QEmu : Can run other architectures than x86 too


BOOT SECTOR PROGRAMMING(16-bit READ MODE)
-assemblers have been written that translate more human friendly instructions into machine code for a particular CPU.


An NASM Assembler code for the previous Machine Instruction
;
; A simple boot sector program that loops forever.
;
loop :                                  ; Define a label , " loop " , that will allow
                                        ; us to jump back to it , forever.

jmp loop                                ;Use a simple CPU instruction that jumps to a new memory address to continue execution.
                                        ;In our case , jump to the address of the current instruction.

times 510 -( $ - $$ ) db 0              ;When compiled , our program must fit into 512 bytes , with the
                                        ; last two bytes being the magic number 
                                        ;so here , tell our assembly compiler to pad out our program with
                                        ; enough zero bytes ( db 0) to bring us to the 510 th byte.
dw 0 xaa55                              ; Last two bytes ( one word ) form the magic number ,
                                        ; so BIOS knows we are a boot sector.

assemble using $nasm boot_sect.asm -f bin -o boot_sect.bin
run $qemu-system-x86_64 boot_sect.bin to see if it loops correctly 
run $od -t x1 -A n boot_sect.bin to see the actual machine code which we wrote earlier (od is octal dump)

16 BIT REAL MODE Vs 32 BIT PROTECTION MODE
For backward compatibility, it is important that CPUs boot initially in 16-bit
real mode, requiring modern operating systems explicitly to switch up into the more
advanced 32-bit (or 64-bit) protected mode, but allowing older operating systems to
carry on, blissfully unaware that they are running on a modern CPU. Later on, we will
look at this important step from 16-bit real mode into 32-bit protected mode in detail.

TO PRINT A LETTER ON THE DEVICE SCREEN USING BOOT-SECTOR PROGRAM
We take the help of BIOS here, because it is the only one software right now that uses the display device for basic testing operations. But how to gethold of this BIOS code? We use interrupts!!

***

Interrupts are a mechanism that allow the CPU temporarily to halt what it is doing and
run some other, higher-priority instructions before returning to the original task.

Each interrupt is represented by a unique number that is an index to the interrupt
vector, a table initially set up by BIOS at the start of memory (i.e. at physical address
0x0) that contains address pointers to interrupt service routines (ISRs). An ISR is simply
a sequence of machine instructions, much like our boot sector code, that deals with a
specific interrupt (e.g. perhaps to read new data from a disk drive or from a network
card).
So, in a nutshell, BIOS adds some of its own ISRs to the interrupt vector that
specialise in certain aspects of the computer, for example: interrupt 0x10 causes the
screen-related ISR to be invoked; and interrupt 0x13, the disk-related I/O ISR.
However, it would be wasteful to allocate an interrupt per BIOS routine, so BIOS
multiplexes the ISRs by what we could imagine as a big switch statement, based usually
on the value set in one of the CPUs general purpose registers, ax, prior to raising the
interrupt.

***

CPU REGISTERS

All x86 CPUs have four general purpose registers,
ax, bx, cx, and dx, for exactly that purpose. Also, these registers, which can each hold
a word (two bytes, 16 bits) of data, can be read and written by the CPU with negligible
delay as compared with accessing main memory.

mov ax,1234
mov cx,0x234
mox dx,'t'
mov bx,ax


So, recall that we’d like BIOS to print a character on the screen for us, and that we
can invoke a specific BIOS routine by setting ax to some BIOS-defined value and then triggering a specific interrupt. The specific routine we want is the BIOS scrolling tele-type routine, which will print a single character on the screen and advance the cursor, ready for the next character.

There is a whole list of BIOS routines published that show
you which interrupt to use and how to set the registers prior to the interrupt. Here, we
need interrupt 0x10 and to set ah to 0x0e (to indicate tele-type mode) and al to the
ASCII code of the character we wish to print.

(Refer hello.asm for code details)

MEMORY, ADDRESSES AND LABELS
We said earlier how the CPU fetches and executes instructions from memory, and how it
was BIOS that loaded our 512-byte boot sector into memory and then, having finished
its initialisations, told the CPU to jump to the start of our code, whereupon it began
executing our first instruction, then the next, then the next, etc.
So our boot sector code is somewhere in memory; but where?
**As it turns out, BIOS likes always to load the boot sector to the address '0x7c00',
where it is sure will not be occupied by important routines.**

(REFER helloworld.asm)

In the assembler we can define a string as follows:
my_string :
db ’ Booting OS ’
We’ve actually already seen db, which translates to “declare byte(s) of data”, which tells
the assembler to write the subsequent bytes directly to the binary output file

the convention is to declare strings
as null-terminating, which means we always declare the last byte of the string as 0, as
follows:
my_string :
db ’ Booting OS ’ ,0
When later iterating through a string, perhaps to print each of its characters in turn, we
can easily determine when we have reached the end.


USING THE STACK
The stack is really just a simple solution to the following
inconvenience: the CPU has a limited number of registers for the temporary storage of
our routine’s local variables, but we often need more temporary storage than will fit into
these registers; now, we can obviously make use of main memory, but specifying specific
memory addresses when reading and writing is inconvenient, especially since we do not
care exactly where the data is to be stored, only that we can retrieve it easily enough.
And, as we shall see later, the stack is also useful for argument passing to realise function
calls.
So, the CPU offers two instructions push and pop that allow us, respectively, to store
a value and retrieve a value from the top of the stack, and so without worrying exactly
where they are stored.
Stack is implemented by two special CPU registers, 'bp' and 'sp', which maintain
the addresses of the stack base (i.e. the stack bottom) and the stack top respectively.
Since the stack expands as we push data onto it, we usually set the stack’s base far away
from important regions of memory (e.g. such as BIOS code or our code) so their is no
danger of overwriting if the stack grows too large. One confusing thing about the stack
is that it actually grows downwards from the base pointer, so when we issue a push,
the value actually gets stored below --- and not above --- the address of bp, and sp is
decremented by the value’s size.

(REFER TO stack.asm)

CONTROL STRUCTURES
After compilation, these high-level control structures reduce to simple jump state-
ments. Actually, we’ve already seen the simplest example of loops:

some_label:
    jmp some_label ;jumps to the address of the label

jmp $ ;jumps to address of the current instruction
So this instruction offers us an unconditional jump (i.e. it will always jump); but we
often need to jump based on some condition (e.g. carry on looping until we have looped
ten times, etc.).

Conditional jumps are achieved in assembly language by first running a comparison
instruction, then by issuing a specific conditional jump instruction.

cmp ax,4 ;compare the value in ax to 4
je then_block ;jump to then label if above is equal
mov bx,45 ; if not equal move 45 to bx
jmp the_end ;jump to the_end label

then_block:
    mov bx,23
the_end:

In a language such as C or Java, this would look like this:
if ( ax == 4) {
bx = 23;
} else {
bx = 45;
}

We can see from the assembly example that there is something going on behind the
scenes that is relating the cmp instruction to the je instruction it proceeds. This is an
example of where the CPU’s special flags register is used to capture the outcome of
the cmp instruction, so that a subsequent conditional jump instruction can determine
whether or not to jump to the specified address.

Other Jump statements available:
je
jne
jl
jle
jg
jge

CALLING FUNCTIONS
At the CPU level a function is
nothing more than a jump to the address of a useful routine then a jump back again to
the instruction immediately following the first jump.
Functions can be seen something like this:
......
......
mov al, 'H'
jmp my_print_function
return_to_here:
....
....
....
....

my_print_function:
mov ah,0x0e
int 0x10
jmp return_to_here

Note how we used the register al as a parameter, by setting it up ready for
the function to use. This is how parameter passing is made possible in higher level
languages, where the caller and callee must have some agreement on where and how
many parameters will be passed.

Borrowing from the parameter passing idea, the caller code could store the correct
return address (i.e. the address immediately after the call) in some well-known location,
then the called code could jump back to that stored address.

The CPU keeps track of the
current instruction being executed in the special register ip (instruction pointer), which,
sadly, we cannot access directly. However, the CPU provides a pair of instructions, call
and ret, which do exactly what we want: call behaves like jmp but additionally, before
actually jumping, pushes the return address on to the stack; ret then pops the return
address off the stack and jumps to it, as follows:

mov al , ’H ’; Store ’H ’ in al so our function will print it.
call my_print_function
...
...
my_print_function :
mov ah , 0x0e
int 0x10
ret


The above function called may try to change the value of the registers also, since registers are scarce resource. Thus it is good to push the previous value of the registers to the stack and then pull it out after the function is over.
'pusha' and 'popa' helps to push and pop all register values to the stack.
....
....
some_function :
pusha
mov bx , 10
add bx , 20
mov ah , 0 x0e
int 0 x10
popa
ret 


INCLUDE FILES
After slaving away even on the seemingly simplest of assembly routines, you will likely
want to reuse your code in multiple programs. nasm allows you to include external files
literally as follows:
% include " my_print_function.asm " ; this will simply get replaced by
                                    ; the contents of the file

mov al , ’H ’; Store ’H ’ in al so our function will print it.
call my_print_function
