In order to make fuller use of the CPU, and to better understand how CPU architectures can benefit modern operating system, namely protection in hardware, then we must press on into 32-bit protected mode.
Main differences in 32-bit protected mode:
• Registers are extended to 32 bits, with their full capacity being accessed by pre-
fixing an e to the register name, for example: mov ebx, 0x274fe8fe
• For convenience, there are two additional general purpose segment registers, fs
and gs.
• 32-bit memory offsets are available, so an offset can reference a whopping 4 GB
of memory (0xffffffff).
• The CPU supports a more sophisticated --- though slightly more complex ---
means of memory segmentation, which offers two big advantages:
– Code in one segment can be prohibited from executing code in a more priv-
ilidged segment, so you can protect your kernel code from user applications
– The CPU can implement virtual memory for user processes, such that pages
(i.e. fixed-sized chunks) of a process’s memory can be swapped transparently
between the disk and memory on an as-needed basis. This ensure main
memory is used efficiently, in that code or data that is rarely executed
needn’t hog valuable memory.
• Interrupt handling is also more sophisticated.


The most difficult part about switching the CPU from 16-bit real mode into 32-bit
protected mode is that we must prepare a complex data structure in memory called the
global descriptor table (GDT), which defines memory segments and their protected-mode
attributes. Once we have defined the GDT, we can use a special instruction to load it
into the CPU, before setting a single bit in a special CPU control register to make the
actual switch.
This process would be easy enough if we didn’t have to define the GDT in assembly
language, but sadly this low-level switch-over is unavoidable if we later wish to load a
kernel that has been compiled from a higher-level language such as C, which usually will
be compiled to 32-bit instructions rather than the less-efficient 16-bit instructions.

And also!!!!! There is no BIOS available in 32 bit protected mode.

ADAPTING LIFE WITHOUT BIOS
Codes and Routines of BIOS are only for 16 bit mode and not for 32-bit protection mode.
So what this means is that a 32-bit operating system must provide its own drivers for
all hardware of the machine (e.g. the keybaord, screen, disk drives, mouse, etc). Actually,
it is possible for a 32-bit protected mode operating system to switch temporarily back
into 16-bit mode whereupon it may utilise BIOS, but this teachnique can be more trouble
than it is worth, especially in terms of performance.

First problem is to how to print characters on the screen?
For now, it suffices to know that the display device can be configured into one
of several resolutions in one of two modes, text mode and graphics mode; and that what
is displayed on the screen is a visual representation of a specific range of memory. So,
in order to manipulate the screen, we must manipulate the specific memory range that
it is using in its current mode. The display device is an example of memory-mapped
hardware because it works in this way.
In text mode, the programmer does not need to render
individual pixels to describe specific characters, since a simple font is already defined
in the internal memory of the VGA(Video Graphics Device) display device. Instead, each character cell of the
screen is represented by two bytes in memory: the first byte is the ASCII code of the
character to be displayed, and the second byte encodes the characters attributes, such
as the foreground and background colour and if the character should be blinking.

So, if we’d like to display a character on the screen, then we need to set its ASCII
code and attributes at the correct memory address for the current VGA mode, which
is usually at address 0xb8000.

UNDERSTANDING GLOBAL DESCRIPTOR TABLE GDT
Once the CPU has been switched
into 32-bit protected mode, the process by which it translates logical addresses (i.e.
the combination of a segment register and an offset) to physical address is completely
different: rather than multiply the value of a segment register by 16 and then add to it
the offset, a segment register becomes an index to a particular segment descriptor (SD)
in the GDT.
A segment descriptor is an 8-byte structure that defines the following properties of
a protected-mode segment:
• Base address (32 bits), which defines where the segment begins in physical memory
• Segment Limit (20 bits), which defines the size of the segment
• Various flags, which affect how the CPU interprets the segment, such as the
privilige level of code that runs within it or whether it is read- or write-only.

The simplest workable configuration of segment registers is described by Intel as the
basic flat model, whereby two overlapping segments are defined that cover the full 4 GB
of addressable memory, one for code and the other for data. The fact that in this model
these two segments overlap means that there is no attempt to protect one segment from
the other, nor is there any attempt to use the paging features for virtual memory. It
pays to keep things simple early on, especially since later we may alter the segment
descriptors more easily once we have booted into a higher-level language.
In addition to the code and data segments, the CPU requires that the first entry
in the GDT purposely be an invalid null descriptor (i.e. a structure of 8 zero bytes).
The null descriptor is a simple mechanism to catch mistakes where we forget to set a
particular segment register before accessing an address, which is easily done if we had
some segment registers set to 0x0 and forgot to update them to the appropriate segment
descriptors after switching to protected mode. If an addressing attempt is made with the
null descriptor, then the CPU will raise an exception, which essentially is an interrupt
and which, although not too disimilar as a concept, is not to be confused with exceptions
in higher level languages such as Java.

Our code segment will have the following configuration:
• Base: 0x0
• Limit: 0xfffff
• Present: 1, since segment is present in memory - used for virtual memory
• Privilige: 0, ring 0 is the highest privilige
• Descriptor type: 1 for code or data segment, 0 is used for traps
• Type:
– Code: 1 for code, since this is a code segment
– Conforming: 0, by not corming it means code in a segment with a lower
privilege may not call code in this segment - this a key to memory protection
– Readable: 1, 1 if readible, 0 if execute-only. Readible allows us to read
constants defined in the code.
– Accessed: 0 This is often used for debugging and virtual memory techniques,
since the CPU sets the bit when it accesses the segment
– Granularity: 1, if set, this multiplies our limit by 4 K (i.e. 16*16*16), so our
0xfffff would become 0xfffff000 (i.e. shift 3 hex digits to the left), allowing
our segment to span 4 Gb of memory
– 32-bit default: 1, since our segment will hold 32-bit code, otherwise we’d use
0 for 16-bit code. This actually sets the default data unit size for operations
(e.g. push 0x4 would expand to a 32-bit number ,etc.)
– 64-bit code segment: 0, unused on 32-bit processor
– AVL: 0, We can set this for our own uses (e.g. debugging) but we will not
use it

Since we are using a simple flat model, with two overlapping code and data segments,
the data segment will be identical but for the type flags:
• Code: 0 for data
• Expand down: 0 . This allows the segment to expand down - TODO
explain this
• Writable: 1. This allows the data segment to be written to, otherwise
it would be read only
• Accessed: 0 This is often used for debugging and virtual memory
techniques, since the CPU sets the bit when it accesses the segment
Now that we have seen an actual configuration of two segments, exploring most of
the possible segment descriptor settings, it should be clearer how protected mode offers
much more flexibilty in the partioning of memory than real mode.

DEFINING GDT IN ASSEMBLY

----------code STARTS------------

; GDT
gdt_start :

gdt_null : ; the mandatory null descriptor
dd 0x0 ; ’ dd ’ means define double word ( i.e. 4 bytes )
dd 0x0

gdt_code : ; the code segment descriptor
; base =0x0 , limit =0xfffff ,
; 1 st flags : ( present )1 ( privilege )00 ( descriptor type )1 -> 1001 b
; type flags : ( code )1 ( conforming )0 ( readable )1 ( accessed )0 -> 1010 b
; 2 nd flags : ( granularity )1 (32 - bit default )1 (64 - bit seg )0 ( AVL )0 -> 1100 b
dw 0xffff; Limit ( bits 0 -15)
dw 0x0; Base ( bits 0 -15)
db 0x0; Base ( bits 16 -23)
db 10011010b ; 1 st flags , type flags
db 11001111b ; 2 nd flags , Limit ( bits 16 -19)
db 0x0; Base ( bits 24 -31)
gdt_data : ; the data segment descriptor
; Same as code segment except for the type flags :
; type flags : ( code )0 ( expand down )0 ( writable )1 ( accessed )0 -> 0010 b
dw 0xffff; Limit ( bits 0 -15)
dw 0x0; Base ( bits 0 -15)
db 0x0; Base ( bits 16 -23)
db 10010010b ; 1 st flags , type flags
db 11001111b ; 2 nd flags , Limit ( bits 16 -19)
db 0x0; Base ( bits 24 -31)

gdt_end :
; The reason for putting a label at the end of the
; GDT is so we can have the assembler calculate
; the size of the GDT for the GDT decriptor ( below )

; GDT descriptior
gdt_ descriptor :
dw gdt_end - gdt_start - 1
dd gdt_start
; Size of our GDT , always less one
; of the true size
; Start address of our GDT
; Define some handy constants for the GDT segment descriptor offsets , which
; are what segment registers must contain when in protected mode. For example ,
; when we set DS = 0 x10 in PM , the CPU knows that we mean it to use the
; segment described at offset 0 x10 ( i.e. 16 bytes ) in our GDT , which in our
; case is the DATA segment (0 x0 -> NULL ; 0 x08 -> CODE ; 0 x10 -> DATA )
CODE_SEG equ gdt_code - gdt_start
DATA_SEG equ gdt_data - gdt_start

-----------code ENDS------------


Once both the GDT and the GDT descriptor have been prepared within our boot sector,
we are ready to instruct the CPU to switch from 16-bit real mode into 32-bit protected
mode.

MAKING THE SWITCH
-cli -- clear interrupts
which means the CPU will simply ignore any future interrupts that may
happen, at least until interrupts are later enabled. This is very important, because, like
segment based addressing, interrupt handling is implemtented completely differently in
protected mode than in real mode.

-The next step is to tell the CPU about the GDT that we just prepared --- with great
pain. We use a single instruction to do this, to which we pass the GDT descriptor:
lgdt [ gdt_descriptor ]

-Now that all is in-place, we make the actual switch over, by setting the first bit of a
special CPU control register, cr0. Now, we cannot set that bit directly on the register,
so we must load it into a general purpose register, set the bit, then store it back into
cr0. Similarly to how we used the and instruction in Section XXX to exclude bits from
a value, we can use the or instruction to include certain bits into a value (i.e. without
disturbing any other bits that, for some important reason, may have been set already in
the control register).
mov eax , cr0; To make the switch to protected mode , we set
or eax , 0x1; the first bit of CR0 , a control register
mov cr0 , eax; Update the control register

-We do not normally need to worry about CPU internals such as pipelining when
programming the CPU, but switching CPU modes is a special case, since there is a risk
that the CPU may process some stages of an instruction’s execution in the wrong mode.
So what we need to do, immediately after instructing the CPU to switch mode, is to
force the CPU to finish any jobs in its pipeline, so that we can be confident that all
future instructions will be executed in the correct mode.

-Now, pipelining works very well when the CPU knows about the next few instructions
that will be coming over the horizon, since it can pre-fetch them, but it doesn’t like
instructions such as jmp or call, because until those instructions have been executed
fully the CPU can have no idea about the instructions that will follow them, especially if
we use a far jump or call, which means that we jump to another segment. So immediately
after instructing the CPU to switch mode, we can issue a far jump, which will force the
CPU to flush the pipeline (i.e. complete all of instructions currently in different stages
of the pipeline).
To issue a far jump, as opposed to a near (i.e. standard) jump, we additionally
provide the target segment, as follows:
jmp < segment >: < address offset >

For this jump, we need to think carefully about where we wish to land. Suppose we set up
a label in our code such as start protected mode that marks the beginning of our 32-bit
code. As we have just discussed, a near jump, such as jmp start protected mode may
not be sufficient to flush the pipeline, and, besides we are now in some strange limbo,
since our current code segment (i.e. cs) will not be valid in protected mode. So, we
must update our cs register to the offset of the code segment descriptor of our GDT.
Since the segment descriptiors are each 8 bytes long, and since our code descriptor was
the second descriptor in our GDT (the null descriptor was the first), its offset will be
0x8, and so this value is what we must now set our code segment register to. Note that,
by the very definition of a far jump, it will automatically cause the CPU to update our
cs register to the target segment. Making handy use of labels, we got our assembler to
calculate these segment descriptor offsets and store them as the constants CODE SEG and
DATA SEG, so now we arrive at out jump instruction:

jmp CODE_SEG : start_protected_mode
[ bits 32]
start_protected_mode :
...
; By now we are assuredly in 32 - bit protected mode.

Note also that we need to use the [bits 32] directive to tell our assembler that,
from that point onwards, it should encode in 32-bit mode instructions.
Now we are in 32-bit protected mode. A good thing to do once we have entered
32-bit mode proper is to update all of the other segment registers so they now point to
our 32-bit data segment (rather than the now-invalid real mode segments) and update
the position of the stack.
We can combine the whole process into a re-usable routine,

----------------code STARTS--------------

[ bits 16]
; Switch to protected mode
switch_to_pm :
cli        ; We must switch of interrupts until we have
           ; set - up the protected mode interrupt vector
           ; otherwise interrupts will run riot.

lgdt [ gdt_descriptor ] ; Load our global descriptor table , which defines
                        ; the protected mode segments ( e.g. for code and data )

mov eax , cr0
or eax , 0 x1 ; To make the switch to protected mode , we set
mov cr0 , eax ; the first bit of CR0 , a control register

ODE_SEG : init_pm ; Make a far jump ( i.e. to a new segment ) to our 32 - bit
                  ; code. This also forces the CPU to flush its cache of
                  ; pre - fetched and real - mode decoded instructions , which can
                  ; cause problems.
ts 32]
; Initialise registers and the stack once in PM.
init_pm :
mov ax, DATA_SEG; Now in PM , our old segments are meaningless ,
mov ds, ax; so we point our segment registers to the
mov ss, ax; data selector we defined in our GDT
mov es, ax
mov fs, ax
mov gs, ax

mov ebp, 0x90000 ; Update our stack position so it is right
mov esp, ebp; at the top of the free space.
call BEGIN_PM ; Finally , call some well - known label selector we defined in our GDT

--------------code ENDS------------

PUUTING IT ALL TOGETHER:

------code STARTS-------

; A boot sector that enters 32 - bit protected mode.
[ org 0x7c00 ]
mov bp , 0x9000
mov sp , bp; Set the stack.
mov bx , MSG_REAL_MODE
call print_string
call switch_to_pm; Note that we never return from here.
jmp $
% include "../print/print_string.asm"
% include "gdt.asm"
% include "print_string_pm.asm"
% include "switch_to_pm.asm"

; This is where we arrive after switching to and initialising protected mode.
BEGIN_PM :
mov ebx , MSG_PROT_MODE
call print_string_pm; Use our 32 - bit print routine.
jmp $; Hang.

; Global variables
MSG_REAL_MODE db " Started in 16 - bit Real Mode " , 0
MSG_PROT_MODE db " Successfully landed in 32 - bit Protected Mode " , 0

; Bootsector padding
times 510 -( $-$$) db 0
dw 0xaa55

---------code ENDS---------

